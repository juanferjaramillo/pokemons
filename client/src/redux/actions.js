import axios from "axios";
export const ADD_TO_BOARD = "ADD_TO_BOARD"; //Add a pokemon to the board array
export const ADD_PK_TO_BOARD = "ADD_PK_TO_BOARD";
export const GET_ALL_PK = "GET_ALL_PK";
export const STORE_BOARD_PAGE = "STORE_BOARD_PAGE";
export const INCREASE_BOARD_PAGE = "INCREASE_BOARD_PAGE";
export const DECREASE_BOARD_PAGE = "DECREASE_BOARD_PAGE";
export const ORDER_BY_NAME = "ORDER_BY_NAME";
export const ORDER_BY_ATTACK = "ORDER_BY_ATTACK";
export const FILTER_BY_TYPE = "FILTER_BY_TYPE";
export const DISPLAY_ALL_PK = " DISPLAY_ALL_PK";
export const POST_PK = "POST_PK";
export const GET_TYPES = "GET_TYPES";
export const FILTER_BY_ORIGIN = "FILTER_BY_ORIGIN";

export const storeBoardPage = (page) => {
  //stores the page being shown on the board
  return {
    type: STORE_BOARD_PAGE,
    payload: page,
  };
};

export const dispAllPk = () => {
  // loads cardsFiltered with all 60 pokemons in state
  return {
    type: DISPLAY_ALL_PK,
  };
};

export const increaseBoardPage = () => {
  return {
    type: INCREASE_BOARD_PAGE,
  };
};

export const decreaseBoardPage = () => {
  return {
    type: DECREASE_BOARD_PAGE,
  };
};

export const addToBoard = (pok) => {
  //Add a pokemon to the board array (by name)
  return async function (dispatch) {
    try {
      let myPok = await axios.get(
        `http://localhost:3001/pokemons/?name=${pok}`
      );
      myPok = myPok.data;
      return dispatch({
        type: ADD_TO_BOARD,
        payload: myPok,
      });
    } catch (error) {
      alert(`❗️ pokemon ${pok} was not found 🤨`);
      console.log(`error: ${error.message}`);
    }
  };
};

export const getAllPks = () => {
  //brings pks to the state
  return async function (dispatch) {
    try {
      console.log('actions: about to get types:');
      await axios.get("http://localhost:3001/types");
      
      console.log('actions: about to get poks:');
      let myPoks = await axios.get(`http://localhost:3001/pokemons/`);
      console.log('actions: did I get poks?');
      //request to return all pokemons from DB and some pokemons from API to store them in the state
      myPoks = myPoks.data;
      return dispatch({
        type: GET_ALL_PK,
        payload: { myPoks },
      });
    } catch (error) {
      alert(
        "❌ Something went wrong while connecting to the internet 🤨, try reloading the page"
      );
      console.log(`error: ${error.message}`);
    }
  };
};

export const postPokemon = (pok) => {
  return async function (dispatch) {
    console.log(`actions:  dispatching `);
    try {
      let { pokType, id } = (
        await axios.post("http://localhost:3001/pokemons", pok)
      ).data;
      //returns an array with the name strings of the pokemon types

      if (pokType.length === 2) {
        pok.types = [pokType[0].name, pokType[1].name];
      }
      if (pokType.length === 1) {
        pok.types = [pokType[0].name];
      }
      if (pokType.length === 0) {
        pok.types = [];
      }

      pok.id = id;
      //includes pokemon id auto generated by UUID

      console.log(`actions: pok`);
      console.log(pok);
      console.log(`actions: id`);
      console.log(id);

      alert("✅ pokemon created!");
      return dispatch({
        type: POST_PK,
        payload: pok,
      });
    } catch (error) {
      alert("❌ mmm, your pokemon could not be created 😌, please try again");
      console.log(`actions: ${error.message}`);
    }
  };
};

export const filterTypeCards = (type) => {
  console.log(`filter by ${type}`);

  return {
    type: FILTER_BY_TYPE,
    payload: type,
  };
};

export const filterOriginCards = (origin) => {
  console.log(`filter by ${origin}`);
  return {
    type: FILTER_BY_ORIGIN,
    payload: origin,
  };
};

export const orderByName = (OBN) => {
  return {
    type: ORDER_BY_NAME,
    payload: OBN,
  };
};

export const orderByAttack = (OBA) => {
  return {
    type: ORDER_BY_ATTACK,
    payload: OBA,
  };
};
